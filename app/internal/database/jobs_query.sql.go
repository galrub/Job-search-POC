// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: jobs_query.sql

package database

import (
	"context"
	"time"

	"github.com/gofrs/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const deleteJob = `-- name: DeleteJob :exec
DELETE FROM jobs
WHERE id = $1
`

func (q *Queries) DeleteJob(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteJob, id)
	return err
}

const getJobByCopmpanyAndDescription = `-- name: GetJobByCopmpanyAndDescription :one
SELECT id, user_id, company, position_desc, remote, contract_type, contacted, general_status, created_at, updated_at, comments FROM jobs
WHERE company = $1 AND position_desc = $2
`

type GetJobByCopmpanyAndDescriptionParams struct {
	Company      string `json:"company"`
	PositionDesc string `json:"position_desc"`
}

func (q *Queries) GetJobByCopmpanyAndDescription(ctx context.Context, arg GetJobByCopmpanyAndDescriptionParams) (Job, error) {
	row := q.db.QueryRow(ctx, getJobByCopmpanyAndDescription, arg.Company, arg.PositionDesc)
	var i Job
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Company,
		&i.PositionDesc,
		&i.Remote,
		&i.ContractType,
		&i.Contacted,
		&i.GeneralStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Comments,
	)
	return i, err
}

const getJobById = `-- name: GetJobById :one
SELECT id, user_id, company, position_desc, remote, contract_type, contacted, general_status, created_at, updated_at, comments FROM jobs
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetJobById(ctx context.Context, id uuid.UUID) (Job, error) {
	row := q.db.QueryRow(ctx, getJobById, id)
	var i Job
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Company,
		&i.PositionDesc,
		&i.Remote,
		&i.ContractType,
		&i.Contacted,
		&i.GeneralStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Comments,
	)
	return i, err
}

const getJobsByUserEmail = `-- name: GetJobsByUserEmail :many
SELECT j.id, j.user_id, j.company, j.position_desc, j.remote, j.contract_type, j.contacted, j.general_status, j.created_at, j.updated_at, j.comments FROM jobs j
INNER JOIN users u ON j.user_id = u.id
WHERE u.email = $1
`

func (q *Queries) GetJobsByUserEmail(ctx context.Context, email string) ([]Job, error) {
	rows, err := q.db.Query(ctx, getJobsByUserEmail, email)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Job
	for rows.Next() {
		var i Job
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Company,
			&i.PositionDesc,
			&i.Remote,
			&i.ContractType,
			&i.Contacted,
			&i.GeneralStatus,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Comments,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getJobsByUserId = `-- name: GetJobsByUserId :many
SELECT id, user_id, company, position_desc, remote, contract_type, contacted, general_status, created_at, updated_at, comments FROM jobs
WHERE user_id = $1
`

func (q *Queries) GetJobsByUserId(ctx context.Context, userID uuid.UUID) ([]Job, error) {
	rows, err := q.db.Query(ctx, getJobsByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Job
	for rows.Next() {
		var i Job
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Company,
			&i.PositionDesc,
			&i.Remote,
			&i.ContractType,
			&i.Contacted,
			&i.GeneralStatus,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Comments,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertJob = `-- name: InsertJob :exec
INSERT INTO public.jobs(
	user_id, company, position_desc, remote, contract_type, contacted, general_status, created_at, comments)
	VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
`

type InsertJobParams struct {
	UserID        uuid.UUID   `json:"user_id"`
	Company       string      `json:"company"`
	PositionDesc  string      `json:"position_desc"`
	Remote        pgtype.Bool `json:"remote"`
	ContractType  string      `json:"contract_type"`
	Contacted     pgtype.Bool `json:"contacted"`
	GeneralStatus string      `json:"general_status"`
	CreatedAt     time.Time   `json:"created_at"`
	Comments      pgtype.Text `json:"comments"`
}

func (q *Queries) InsertJob(ctx context.Context, arg InsertJobParams) error {
	_, err := q.db.Exec(ctx, insertJob,
		arg.UserID,
		arg.Company,
		arg.PositionDesc,
		arg.Remote,
		arg.ContractType,
		arg.Contacted,
		arg.GeneralStatus,
		arg.CreatedAt,
		arg.Comments,
	)
	return err
}

const updateJob = `-- name: UpdateJob :exec
UPDATE jobs
	SET company=$1,
      position_desc=$2,
      remote=$3,
      contract_type=$4,
      contacted=$5, 
      created_at=$6,
      comments=$7,
      general_status=$8
WHERE id = $9
`

type UpdateJobParams struct {
	Company       string      `json:"company"`
	PositionDesc  string      `json:"position_desc"`
	Remote        pgtype.Bool `json:"remote"`
	ContractType  string      `json:"contract_type"`
	Contacted     pgtype.Bool `json:"contacted"`
	CreatedAt     time.Time   `json:"created_at"`
	Comments      pgtype.Text `json:"comments"`
	GeneralStatus string      `json:"general_status"`
	ID            uuid.UUID   `json:"id"`
}

func (q *Queries) UpdateJob(ctx context.Context, arg UpdateJobParams) error {
	_, err := q.db.Exec(ctx, updateJob,
		arg.Company,
		arg.PositionDesc,
		arg.Remote,
		arg.ContractType,
		arg.Contacted,
		arg.CreatedAt,
		arg.Comments,
		arg.GeneralStatus,
		arg.ID,
	)
	return err
}
